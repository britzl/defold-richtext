local richtext = require "richtext.richtext"



local function create_complex_example()
	local settings = {
		fonts = {
			Roboto = {
				regular = hash("Roboto-Regular"),
				italic = hash("Roboto-Italic"),
				bold = hash("Roboto-Bold"),
				bold_italic = hash("Roboto-BoldItalic"),
			},
			Nanum = {
				regular = hash("Nanum-Regular"),
			},
		},
		layers = {
			fonts = {
				[hash("Roboto-Regular")] = hash("roboto-regular"),
				[hash("Roboto-Italic")] = hash("roboto-italic"),
				[hash("Roboto-Bold")] = hash("roboto-bold"),
				[hash("Roboto-BoldItalic")] = hash("roboto-bold_italic"),
				[hash("Nanum-Regular")] = hash("nanum-regular"),
			},
			images = {
				[hash("smileys")] = hash("image-smileys"),
			},
			spinemodels = {
				[hash("spineboy")] = hash("spine-spineboy"),
			},
		},
		width = 400,
		position = vmath.vector3(0, 0, 0),
		parent = gui.get_node("bg"),
		color = vmath.vector4(0.95, 0.95, 1.0, 1.0),
		align = richtext.ALIGN_LEFT,
		line_spacing = 0.85,
	}
	local text = "<size=3>RichText</size>Lorem <color=0,0.5,0,1>ipsum </color><img=smileys:zombie/> dolor <color=red>sit </color><color=#ff00ffff>amet, </color><size=1.15><font=Nanum>consectetur </font></size>adipiscing elit.<br/><b>Nunc </b>tincidunt <b><i>mattis</i> libero</b> <i>non viverra</i>.\n\nNullam ornare <img=smileys:hungry></img>accumsan rhoncus.\n\n<size=0.5>Nunc placerat nibh a purus auctor, id scelerisque massa</size> <size=2>rutrum.</size>"
	local words, metrics = richtext.create(text, "Roboto", settings)

	print("The text consists of " .. tostring(metrics.char_count) .. " characters")

	-- adjust background to cover text
	gui.set_size(settings.parent, vmath.vector3(metrics.width, metrics.height, 0))
end


local function create_align_example()
	local settings_align_right = { position = vmath.vector3(640, 200, 0), align = richtext.ALIGN_RIGHT }
	richtext.create("Right align this text\nDo it for both lines", "Roboto-Regular", settings_align_right)

	local settings_align_center = { position = vmath.vector3(320, 90, 0), align = richtext.ALIGN_CENTER }
	richtext.create("Center words around the specified position\nAnd these words as well", "Roboto-Regular", settings_align_center)
end


local function create_clickable_words_example(self)
	local settings = { position = vmath.vector3(10, 130, 0) }
	return richtext.create("Click <color=red><a=click_text>here</a></color> or <color=green><a=click_text>here</a></color> to generate a message", "Roboto-Regular", settings)
end


local function create_truncate_example()
	-- add a "cursor" that should follow at the end of the text as it is revealed
	local cursor = gui.new_box_node(vmath.vector3(), vmath.vector3(2,35,1))
	gui.set_color(cursor, vmath.vector4(1))
	gui.set_pivot(cursor, gui.PIVOT_NW)

	local settings = { position = vmath.vector3(0, 260, 0) }
	local words, metrics = richtext.create("This text should be shown one <img=smileys:cyclops/> at a time...", "Roboto-Regular", settings)
	local length = 0
	richtext.truncate(words, length)
	timer.delay(0.1, true, function()
		length = (length + 1) % (metrics.char_count + 1)
		
		local last_word = richtext.truncate(words, length)
		local pos = vmath.vector3(settings.position)
		if last_word then
			pos = gui.get_position(last_word.node)
			pos.x = pos.x + last_word.metrics.width + 5
		end
		gui.set_position(cursor, pos)
		gui.set_enabled(cursor, not gui.is_enabled(cursor))
	end)
end


local function create_characters_example()
	local settings = { position = vmath.vector3(0, 330, 0) }
	local words, metrics = richtext.create("Our <wave><color=#ff69b4>princess</color></wave> is in another <wave=25><color=red>castle</color></wave>", "Roboto-Regular", settings)
	
	local waves = richtext.tagged(words, "wave")
	for _,wave in pairs(waves) do
		local chars = richtext.characters(wave)
		gui.delete_node(wave.node)
		for i,char in ipairs(chars) do
			local pos = gui.get_position(char.node)
			local pos_2 = gui.get_position(char.node)
			pos_2.y = pos_2.y - 3
			pos_2.x = pos_2.x + 2
			gui.set_position(char.node, pos_2)
			local amplitude = tonumber(wave.tags.wave) or 3
			gui.animate(char.node, gui.PROP_POSITION, pos + vmath.vector3(0, amplitude, 0), gui.EASING_INOUTSINE, 0.6, i * 0.12112, nil, gui.PLAYBACK_LOOP_PINGPONG)
			gui.animate(char.node, "color.x", 0.9, gui.EASING_INOUTSINE, 0.2, i * 0.12112, nil, gui.PLAYBACK_LOOP_PINGPONG)
			gui.animate(char.node, "color.y", 0.9, gui.EASING_INOUTSINE, 0.6, i * 0.12112, nil, gui.PLAYBACK_LOOP_PINGPONG)
			gui.animate(char.node, "color.z", 0.9, gui.EASING_INOUTSINE, 10, i * 0.12112, nil, gui.PLAYBACK_LOOP_PINGPONG)
			gui.animate(char.node, "scale", 1.2, gui.EASING_INOUTSINE, 1.5, i * 0.12112, nil, gui.PLAYBACK_LOOP_PINGPONG)
		end
	end
end


local function create_spine_example()
	local settings = { position = vmath.vector3(320, 400, 0), align = richtext.ALIGN_CENTER }
	richtext.create("A running   <size=0.05><spine=spineboy:run/></size>  in my text", "Roboto-Regular", settings)
end


local function create_nobreak_example()
	local settings_nobr = { position = vmath.vector3(0, 600, 0), align = richtext.ALIGN_LEFT, width = 245 }
	richtext.create("The image at the end should end up on a new line <nobr><img=smileys:cyclops/></nobr>", "Roboto-Regular", settings_nobr)

	local settings_right = { position = vmath.vector3(320, 600, 0), align = richtext.ALIGN_LEFT, width = 245 }
	richtext.create("The image at the end should end up on a new line <img=smileys:cyclops/>", "Roboto-Regular", settings_right)
end



function init(self)
	msg.post(".", "acquire_input_focus")
	create_complex_example()
	create_align_example()
	create_truncate_example()
	create_characters_example()
	create_spine_example()
	create_nobreak_example()
	self.clickable_words = create_clickable_words_example()
end


function on_message(self, message_id, message, sender)
	if message_id == hash("click_text") then
		gui.animate(gui.get_node("flower"), gui.PROP_POSITION, gui.get_position(gui.get_node(message.node_id)), gui.EASING_INOUTQUAD, 1)
	end
end


function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		return richtext.on_click(self.clickable_words, action)
	end
end